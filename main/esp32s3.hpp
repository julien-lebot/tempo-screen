#pragma once

#include <cstdint>
#include <hal/gpio_types.h>
#include <hal/spi_types.h>
#include <esp_attr.h>

#include "lcd_command.hpp"

struct ESP32S3
{
    enum Register36 : uint8_t
    {
        HorizontalRefresh   = 0b00000100,
        RGBOrder            = 0b00001000,
        VerticalRefresh     = 0b00010000,
        RowColumnExchange   = 0b00100000,
        ColumnAddressOrder  = 0b01000000,
        RowAddressOrder     = 0b10000000,
    };

    constexpr static gpio_num_t dc_pin = gpio_num_t(8);
    constexpr static gpio_num_t cs_pin = gpio_num_t(9);
    constexpr static gpio_num_t clk_pin = gpio_num_t(10);
    constexpr static gpio_num_t mosi_pin = gpio_num_t(11);
    constexpr static gpio_num_t miso_pin = gpio_num_t(12);
    constexpr static gpio_num_t rst_pin = gpio_num_t(14);
    constexpr static gpio_num_t bl_pin = gpio_num_t(2);
    constexpr static spi_host_device_t spi_host = SPI2_HOST;
    constexpr static uint16_t screen_width = 240;
    constexpr static uint16_t screen_height = 240;

    // To speed up transfers, every SPI transfer sends a bunch of lines. This define specifies how many. More means more memory use,
    // but less overhead for setting up / finishing transfers. Make sure screen_height is dividable by this.
    constexpr static int parallel_lines = 16;

    DRAM_ATTR static constexpr LCDCommand lcd_init_cmds[] =
    {
        {0xEF, {0}, 0},
        {0xEB, {0x14}, 1},
        {0xFE, {0}, 0},
        {0xEF, {0}, 0},
        {0xEB, {0x14}, 1},
        {0x84, {0x40}, 1},
        {0x85, {0xFF}, 1},
        {0x86, {0xFF}, 1},
        {0x87, {0xFF}, 1},
        {0x88, {0x0A}, 1},
        {0x89, {0x21}, 1},
        {0x8A, {0x00}, 1},
        {0x8B, {0x80}, 1},
        {0x8C, {0x01}, 1},
        {0x8D, {0x01}, 1},
        {0x8E, {0xFF}, 1},
        {0x8F, {0xFF}, 1},
        {0xB6, {0x00, 0x20}, 2},
        {0x36, {static_cast<uint8_t>(Register36::RGBOrder | Register36::VerticalRefresh | Register36::HorizontalRefresh)}, 1},
        {0x3A, {0x05}, 1},
        {0x90, {0x08, 0x08, 0x08, 0x08}, 4},
        {0xBD, {0x06}, 1},
        {0xBC, {0x00}, 1},
        {0xFF, {0x60, 0x01, 0x04}, 3},
        {0xC3, {0x13}, 1},
        {0xC4, {0x13}, 1},
        {0xC9, {0x22}, 1},
        {0xBE, {0x11}, 1},
        {0xE1, {0x10, 0x0E}, 2},
        {0xDF, {0x21, 0x0C, 0x02}, 3},
        {0xF0, {0x45, 0x09, 0x08, 0x08, 0x26, 0x2A}, 6},
        {0xF1, {0x43, 0x70, 0x72, 0x36, 0x37, 0x6F}, 6},
        {0xF2, {0x45, 0x09, 0x08, 0x08, 0x26, 0x2A}, 6},
        {0xF3, {0x43, 0x70, 0x72, 0x36, 0x37, 0x6F}, 6},
        {0xED, {0x1B, 0x0B }, 2},
        {0xAE, {0x77}, 1},
        {0xCD, {0x63}, 1},
        {0x70, {0x07, 0x07, 0x04, 0x0E, 0x0F, 0x09, 0x07, 0x08, 0x03}, 9},
        {0xE8, {0x34}, 1},
        {0x62, {0x18, 0x0D, 0x71, 0xED, 0x70, 0x70, 0x18, 0x0F, 0x71, 0xEF, 0x70, 0x70}, 12},
        {0x63, {0x18, 0x11, 0x71, 0xF1, 0x70, 0x70, 0x18, 0x13, 0x71, 0xF3, 0x70, 0x70}, 12},
        {0x64, {0x28, 0x29, 0xF1, 0x01, 0xF1, 0x00, 0x07}, 7},
        {0x66, {0x3C, 0x00, 0xCD, 0x67, 0x45, 0x45, 0x10, 0x00, 0x00, 0x00}, 10},
        {0x67, {0x00, 0x3C, 0x00, 0x00, 0x00, 0x01, 0x54, 0x10, 0x32, 0x98}, 10},
        {0x74, {0x10, 0x85, 0x80, 0x00, 0x00, 0x4E, 0x00}, 7},
        {0x98, {0x3E, 0x07}, 2},
        {0x35, {0}, 0},
        {0x21, {0}, 0},

        /* Sleep out */
        {0x11, {0}, 0x80},
        /* Display on */
        {0x29, {0}, 0x80},

        {0, {0}, 0xff}

    };
};
